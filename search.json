[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 raoBust authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/intro_raoBust.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Introduction to raoBust","text":"raoBust R package implements robust Wald tests Rao (score) tests generalized linear models. like robust tests robust (retain error rate control) many forms model misspecification. especially like robust Rao tests strong error rate control small samples. raoBust implements robust tests coefficients Poisson GLMs (log link), Binomial GLMs (logit link), linear models (identity link), Multinomial GLMs (log link).","code":""},{"path":[]},{"path":"/articles/intro_raoBust.html","id":"glms","dir":"Articles","previous_headings":"Model fitting","what":"GLMs","title":"Introduction to raoBust","text":"demonstrate raoBust using mtcars dataset. First, let’s consider fitting Poisson GLM estimate test expected fold-difference mpg associated one-unit increase horsepower, account type transmission. choose Poisson regression want estimate fold-difference means, using robust tests worry whether actually expect mpg measurements follow Poisson distribution. Looking output, can see estimated fold-difference mpg associated one-unit increase horsepower exp(-0.003) = 0.997, robust Rao test p-value 0.0020.002. can compare results get ran typical glm. see estimates, glm give us robust standard errors robust Wald Rao tests.","code":"head(mtcars) #>                    mpg cyl disp  hp drat    wt  qsec vs am gear carb #> Mazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4 #> Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1 #> Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1 #> Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2 #> Valiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1 head(iris) #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1          5.1         3.5          1.4         0.2  setosa #> 2          4.9         3.0          1.4         0.2  setosa #> 3          4.7         3.2          1.3         0.2  setosa #> 4          4.6         3.1          1.5         0.2  setosa #> 5          5.0         3.6          1.4         0.2  setosa #> 6          5.4         3.9          1.7         0.4  setosa glm_test(formula = mpg ~ hp + am, data = mtcars, family = poisson(link = \"log\")) #>  #> Call: #> glm(formula = mpg ~ hp + am, data = mtcars, family = poisson(link = \"log\")) #>  #>  #> Coefficient estimates: #>                 Estimate Non-robust Std Error Robust Std Error Lower 95% CI #> (Intercept)  3.327082221         0.1151938176     0.0557891828  3.217737432 #> hp          -0.003110758         0.0006656492     0.0003679554 -0.003831938 #> am           0.234033015         0.0835981015     0.0479722881  0.140009058 #>             Upper 95% CI Non-robust Wald p Robust Wald p Robust Score p #> (Intercept)  3.436427010     1.982292e-183  0.000000e+00   6.558146e-06 #> hp          -0.002389579      2.964427e-06  0.000000e+00   2.397949e-03 #> am           0.328056971      5.118157e-03  1.068933e-06   9.288962e-04 summary(glm(formula = mpg ~ hp + am, data = mtcars, family = poisson(link = \"log\"))) #>  #> Call: #> glm(formula = mpg ~ hp + am, family = poisson(link = \"log\"),  #>     data = mtcars) #>  #> Coefficients: #>               Estimate Std. Error z value Pr(>|z|)     #> (Intercept)  3.3270822  0.1151938  28.882  < 2e-16 *** #> hp          -0.0031108  0.0006656  -4.673 2.96e-06 *** #> am           0.2340330  0.0835981   2.800  0.00512 **  #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> (Dispersion parameter for poisson family taken to be 1) #>  #>     Null deviance: 54.524  on 31  degrees of freedom #> Residual deviance: 10.727  on 29  degrees of freedom #> AIC: Inf #>  #> Number of Fisher Scoring iterations: 4"},{"path":"/articles/intro_raoBust.html","id":"gees-accounting-for-clusters","dir":"Articles","previous_headings":"Model fitting","what":"GEEs, accounting for clusters","title":"Introduction to raoBust","text":"raoBust can also use GEE framework account clustered observations. Let’s add cluster variable mtcars. estimates, different standard errors robust Wald Rao test p-values account clustering.","code":"mtcars$cluster <- rep(1:8, each = 4) gee_test(formula = mpg ~ hp + am, data = mtcars, family = poisson(link = \"log\"), id = cluster) #> Error in geelm(formula = mpg ~ hp + am, data = structure(list(mpg = c(21,  :  #>   could not find function \"geelm\" #> Warning in gee_test(formula = mpg ~ hp + am, data = mtcars, family = #> poisson(link = \"log\"), : GEE solver failed. Estimation will be done with a GLM, #> which will provide consistent parameter estimates but will not be as efficient #> as estimates from a GEE. Robust standard errors will be estimated using a #> clustered jackknife procedure. #> Warning in dpois(y, mu, log = TRUE): non-integer x = 18.700000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 18.100000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 14.300000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 24.400000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 22.800000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 19.200000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 17.800000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 16.400000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 17.300000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 15.200000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 10.400000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 10.400000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 14.700000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 32.400000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 30.400000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 33.900000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 21.500000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 15.500000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 15.200000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 13.300000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 19.200000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 27.300000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 30.400000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 15.800000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 19.700000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 21.400000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 22.800000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 21.400000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 22.800000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 19.200000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 17.800000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 16.400000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 17.300000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 15.200000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 10.400000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 10.400000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 14.700000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 32.400000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 30.400000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 33.900000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 21.500000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 15.500000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 15.200000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 13.300000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 19.200000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 27.300000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 30.400000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 15.800000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 19.700000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 21.400000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 22.800000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 21.400000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 18.700000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 18.100000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 14.300000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 24.400000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 17.300000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 15.200000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 10.400000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 10.400000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 14.700000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 32.400000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 30.400000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 33.900000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 21.500000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 15.500000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 15.200000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 13.300000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 19.200000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 27.300000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 30.400000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 15.800000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 19.700000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 21.400000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 22.800000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 21.400000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 18.700000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 18.100000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 14.300000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 24.400000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 22.800000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 19.200000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 17.800000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 16.400000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 14.700000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 32.400000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 30.400000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 33.900000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 21.500000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 15.500000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 15.200000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 13.300000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 19.200000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 27.300000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 30.400000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 15.800000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 19.700000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 21.400000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 22.800000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 21.400000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 18.700000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 18.100000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 14.300000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 24.400000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 22.800000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 19.200000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 17.800000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 16.400000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 17.300000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 15.200000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 10.400000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 10.400000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 21.500000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 15.500000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 15.200000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 13.300000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 19.200000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 27.300000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 30.400000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 15.800000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 19.700000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 21.400000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 22.800000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 21.400000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 18.700000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 18.100000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 14.300000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 24.400000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 22.800000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 19.200000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 17.800000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 16.400000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 17.300000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 15.200000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 10.400000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 10.400000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 14.700000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 32.400000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 30.400000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 33.900000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 19.200000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 27.300000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 30.400000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 15.800000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 19.700000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 21.400000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 22.800000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 21.400000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 18.700000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 18.100000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 14.300000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 24.400000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 22.800000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 19.200000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 17.800000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 16.400000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 17.300000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 15.200000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 10.400000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 10.400000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 14.700000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 32.400000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 30.400000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 33.900000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 21.500000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 15.500000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 15.200000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 13.300000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 15.800000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 19.700000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 21.400000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 22.800000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 21.400000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 18.700000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 18.100000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 14.300000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 24.400000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 22.800000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 19.200000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 17.800000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 16.400000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 17.300000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 15.200000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 10.400000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 10.400000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 14.700000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 32.400000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 30.400000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 33.900000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 21.500000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 15.500000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 15.200000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 13.300000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 19.200000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 27.300000 #> Warning in dpois(y, mu, log = TRUE): non-integer x = 30.400000 #> Warning: Because estimation has been done with a GLM, there is no estimated #> cluster correlation coefficient. Therefore the robust score test cannot be run. #> In order to run a robust score test for this model, please input a #> within-cluster correlation coefficient to use. #>  #> Call: #> gee_test(formula = mpg ~ hp + am, data = mtcars, family = poisson(link = \"log\"),  #>     id = cluster) #>  #>  #> Coefficient estimates: #>                       Estimate Robust Std Error Lower 95% CI Upper 95% CI #> (Intercept)        3.327082221     0.0889250810  3.152792264  3.501372177 #> hp                -0.003110758     0.0006219336 -0.004329726 -0.001891791 #> am                 0.234033015     0.0683527788  0.100064030  0.368001999 #> correlation:alpha           NA               NA           NA           NA #>                   Robust Wald p Robust Score p #> (Intercept)        0.000000e+00             NA #> hp                 5.681147e-07             NA #> am                 6.172955e-04             NA #> correlation:alpha            NA             NA"},{"path":"/articles/intro_raoBust.html","id":"multinomial-models","dir":"Articles","previous_headings":"Model fitting","what":"Multinomial models","title":"Introduction to raoBust","text":"raoBust, function multinom_test() run robust tests multinomial regression. Important arguments strong j. set strong = TRUE, test strong null hypothesis βkj=0\\beta_{kj} = 0 kk jj, kk represents covariate jj represents level outcome variable. means ’re testing hypothesis non-intercept coefficients equal 00. strong = FALSE must specify outcome level test j argument. case, test hypothesis βkj=0\\beta_{kj} = 0 j specified covariates kk. multinom_test takes Y matrix, n rows J columns dataset n samples multi-category outcome J categories, design matrix X includes metadata. simulate data demonstrate multinom_test() . can now fit model. ’ll start testing strong null hypothesis non-intercept coefficients equal 00. can see strong test larger robust Rao test statistic smaller p-value, compared weak test. makes sense, tests stronger hypothesis likely false (since contains possible weak hypotheses).","code":"set.seed(123)  # for reproducibility  # design matrix: 30 samples x 2 covariates n <- 30 p <- 2 J <- 5 X <- cbind(1, rep(0:1, each = n / 2), rnorm(n))  # coefficient matrix B: 3 rows x 5 columns B <- matrix(rnorm(3 * J, mean = 0, sd = 0.5), nrow = 3, ncol = 5) B[1, ] <- B[1, ] + 3  # generate Poisson outcomes Y <- matrix(NA, nrow = n, ncol = J) for (j in 1:J) {   lambda <- exp(X %*% B[, j])   Y[, j] <- rpois(n, lambda) } strong_test <- multinom_test(Y = Y, X = X, strong = TRUE) strong_test$coef_tab #>    Category   Covariate    Estimate Robust Std Error Lower 95% CI Upper 95% CI #> 11        4           1 -1.52159024       0.14168311   -1.7992840  -1.24389645 #> 2         1           1 -1.19778008       0.10005117   -1.3938768  -1.00168340 #> 8         3           1 -1.13105847       0.11182994   -1.3502411  -0.91187582 #> 4         2 (intercept)  1.04369722       0.08435207    0.8783702   1.20902425 #> 7         3 (intercept)  0.93283338       0.08293878    0.7702764   1.09539040 #> 1         1 (intercept)  0.78509417       0.08361962    0.6212027   0.94898561 #> 5         2           1 -0.64777461       0.09662728   -0.8371606  -0.45838862 #> 9         3           2 -0.63990526       0.05227395   -0.7423603  -0.53745021 #> 12        4           2 -0.60215382       0.06820800   -0.7358390  -0.46846859 #> 10        4 (intercept)  0.47105039       0.12368367    0.2286349   0.71346592 #> 6         2           2 -0.13838624       0.03988563   -0.2165606  -0.06021185 #> 3         1           2 -0.04985085       0.04445023   -0.1369717   0.03727000 #>    Robust Wald p Robust Score p #> 11  6.648178e-27             NA #> 2   5.000849e-33             NA #> 8   4.784250e-24             NA #> 4   3.654085e-35             NA #> 7   2.389181e-29             NA #> 1   6.064411e-21             NA #> 5   2.030015e-11             NA #> 9   1.868292e-34             NA #> 12  1.063748e-18             NA #> 10  1.398072e-04             NA #> 6   5.212790e-04             NA #> 3   2.620759e-01             NA strong_test$test_stat #> [1] 25.10367 strong_test$p #> [1] 0.001492897  weak_test <- multinom_test(Y = Y, X = X, strong = FALSE, j = 3) weak_test$coef_tab #>    Category   Covariate    Estimate Robust Std Error Lower 95% CI Upper 95% CI #> 11        4           1 -1.52159024       0.14168311   -1.7992840  -1.24389645 #> 2         1           1 -1.19778008       0.10005117   -1.3938768  -1.00168340 #> 8         3           1 -1.13105847       0.11182994   -1.3502411  -0.91187582 #> 4         2 (intercept)  1.04369722       0.08435207    0.8783702   1.20902425 #> 7         3 (intercept)  0.93283338       0.08293878    0.7702764   1.09539040 #> 1         1 (intercept)  0.78509417       0.08361962    0.6212027   0.94898561 #> 5         2           1 -0.64777461       0.09662728   -0.8371606  -0.45838862 #> 9         3           2 -0.63990526       0.05227395   -0.7423603  -0.53745021 #> 12        4           2 -0.60215382       0.06820800   -0.7358390  -0.46846859 #> 10        4 (intercept)  0.47105039       0.12368367    0.2286349   0.71346592 #> 6         2           2 -0.13838624       0.03988563   -0.2165606  -0.06021185 #> 3         1           2 -0.04985085       0.04445023   -0.1369717   0.03727000 #>    Robust Wald p Robust Score p #> 11  6.648178e-27             NA #> 2   5.000849e-33             NA #> 8   4.784250e-24             NA #> 4   3.654085e-35             NA #> 7   2.389181e-29             NA #> 1   6.064411e-21             NA #> 5   2.030015e-11             NA #> 9   1.868292e-34             NA #> 12  1.063748e-18             NA #> 10  1.398072e-04             NA #> 6   5.212790e-04             NA #> 3   2.620759e-01             NA weak_test$test_stat #> [1] 10.02201 weak_test$p #> [1] 0.006664209"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Amy Willis. Author, maintainer. David Clausen. Author. Sarah Teichman. Author. Shirley Mathur. Author. Søren Højsgaard. Contributor.           jackknife standard error assistance","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Willis , Clausen D, Teichman S, Mathur S (2025). raoBust: Robust score tests generalized linear models. R package version 1.1.4.0.","code":"@Manual{,   title = {raoBust: Robust score tests for generalized linear models},   author = {Amy Willis and David Clausen and Sarah Teichman and Shirley Mathur},   year = {2025},   note = {R package version 1.1.4.0}, }"},{"path":"/index.html","id":"raobust-robust-rao-score-tests-for-generalized-linear-models","dir":"","previous_headings":"","what":"Robust score tests for generalized linear models","title":"Robust score tests for generalized linear models","text":"raoBust, core, gives important information glm(), also robust score tests. Robust score tests robust (error rate control) many forms model misspecification. Robust score tests outstanding error rate performance small samples, data drawn parametric family (.e., always). shocking well perform. generally conservative small samples, good thing. err conservative samples. tests anti-conservative small samples. currently score tests coefficients Poisson GLMs (log link), Binomial GLMs (logit link), Multinomial GLMs (log link), including linear combinations parameters simultaneous testing (“ANOVA”). another specific case ’d like request, please let us know Issues label “feature request”. package also implements robust Wald tests. Many packages implement robust Wald tests – general methodology robust score tests unique contribution package.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Robust score tests for generalized linear models","text":"can install development version raoBust GitHub : helpful package CRAN, please let us know.","code":"# install.packages(\"devtools\") devtools::install_github(\"statdivlab/raoBust\")"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Robust score tests for generalized linear models","text":"really silly example show syntax. looks just like glm() input side, outputs summary table includes robust Wald Rao tests well others.","code":"library(raoBust) #> Registered S3 methods overwritten by 'geeasy': #>   method       from    #>   drop1.geeglm MESS    #>   drop1.geem   MESS    #>   plot.geeglm  geepack glm_test(dist ~ speed, data = cars, family=poisson(link=\"log\")) #>  #> Call: #> glm(dist ~ speed, data = cars, family = poisson(link = \"log\")) #>  #>  #> Coefficient estimates: #>               Estimate Non-robust Std Error Robust Std Error Lower 95% CI #> (Intercept) 2.15096109          0.081774352      0.180014289     1.798140 #> speed       0.09650242          0.004404885      0.009234056     0.078404 #>             Upper 95% CI Non-robust Wald p Robust Wald p Robust Score p #> (Intercept)    2.5037826     1.743527e-152             0   4.945013e-07 #> speed          0.1146008     2.177435e-106             0   3.956496e-05"},{"path":"/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Robust score tests for generalized linear models","text":"additionally pkgdown website contains pre-built versions function documentation introductory vignette.","code":""},{"path":"/index.html","id":"people","dir":"","previous_headings":"","what":"People","title":"Robust score tests for generalized linear models","text":"Creator, maintainer: Amy D Willis Author: Sarah Teichman Author: David S Clausen Author: Shirley Mathur errors Amy’s fault.","code":""},{"path":"/index.html","id":"naming","dir":"","previous_headings":"","what":"Naming","title":"Robust score tests for generalized linear models","text":"Score tests pioneered C.R. Rao, outstanding statistician methodologist. Score tests sometimes, increasingly rarely, called Rao tests. Rao’s work focused non-robust score tests (robust score tests) tribute Rao package named. Many thanks David Clausen proposing sharing clever portmanteau `raoBust’ package implementing robust score tests. Comment Amy People Color consistently undervalued science mathematics, including statistical methodology. foundations statistical methodology built desire quantitatively show inferiority People Color Jews. believe white supremacy continues manifest names give methods: likely name method person White, likely name method purpose, details another acronym developer Person Color. reason, try call score tests “Rao tests”. invite join .","code":""},{"path":"/reference/combine_independent_p_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine independent p-values that test the same null hypothesis into an overall summary — combine_independent_p_values","title":"Combine independent p-values that test the same null hypothesis into an overall summary — combine_independent_p_values","text":"vector p-values \\((p_1...p_n)\\) independently test specific null hypothesis $H_0$, find relevant quantile chi-sq distribution p-value, sum . \\(\\chi^2_n\\)-distributed test statistic $H_0$, relevant p-value can found. Useful combining analyses stratification (deal potentially complex experimental designs).","code":""},{"path":"/reference/combine_independent_p_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine independent p-values that test the same null hypothesis into an overall summary — combine_independent_p_values","text":"","code":"combine_independent_p_values(ps)"},{"path":"/reference/combine_independent_p_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine independent p-values that test the same null hypothesis into an overall summary — combine_independent_p_values","text":"ps vector independent p-values (test null hypothesis)","code":""},{"path":"/reference/combine_independent_p_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine independent p-values that test the same null hypothesis into an overall summary — combine_independent_p_values","text":"single p-value combines evidence vector","code":""},{"path":"/reference/combine_independent_p_values.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Combine independent p-values that test the same null hypothesis into an overall summary — combine_independent_p_values","text":"Amy Willis","code":""},{"path":"/reference/fisher_info_contribution.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute fisher information contribution to robust score statistic for glm robust score tests. — fisher_info_contribution","title":"Compute fisher information contribution to robust score statistic for glm robust score tests. — fisher_info_contribution","text":"Compute fisher information contribution robust score statistic glm robust score tests.","code":""},{"path":"/reference/fisher_info_contribution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute fisher information contribution to robust score statistic for glm robust score tests. — fisher_info_contribution","text":"","code":"fisher_info_contribution(i, model_fits, yy, xx, family, link)"},{"path":"/reference/fisher_info_contribution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute fisher information contribution to robust score statistic for glm robust score tests. — fisher_info_contribution","text":"Index observation. model_fits fitted glm null hypothesis. yy Vector observed responses. xx Design matrix model. family model family fitted glm. link link function utilized fitted glm.","code":""},{"path":"/reference/gee_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Generalized Estimating Equations under technical replication with robust and non-robust Wald and Rao (score) tests — gee_test","title":"Generalized Estimating Equations under technical replication with robust and non-robust Wald and Rao (score) tests — gee_test","text":"Generalized Estimating Equations technical replication robust non-robust Wald Rao (score) tests","code":""},{"path":"/reference/gee_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalized Estimating Equations under technical replication with robust and non-robust Wald and Rao (score) tests — gee_test","text":"","code":"gee_test(   ...,   use_geeasy = TRUE,   use_jack_se = FALSE,   cluster_corr_coef = NULL,   skip_gee = FALSE )"},{"path":"/reference/gee_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalized Estimating Equations under technical replication with robust and non-robust Wald and Rao (score) tests — gee_test","text":"... Arguments pass regular geepack::geeglm call. observations NA values data (response covariates id) dropped. use_geeasy TRUE, uses geeasy gee estimation, FALSE uses geepack use_jack_se TRUE uses jackknife standard errors (take longer), FALSE uses sandwich standard errors cluster_corr_coef Optional within-cluster correlation coefficient. used parameter estimation GEE fails estimation must instead performed GLM. skip_gee TRUE try optimize GEE (just uses GLM). used internally testing.","code":""},{"path":"/reference/gee_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generalized Estimating Equations under technical replication with robust and non-robust Wald and Rao (score) tests — gee_test","text":"","code":"cars$id <- rep(1:5, each = 10) gee_test(dist ~ speed, data = cars, family=poisson(link=\"log\"), id = id) #> Error in geelm(dist ~ speed, data = structure(list(speed = c(4, 4, 7,  :  #>   could not find function \"geelm\" #> Warning: GEE solver failed. Estimation will be done with a GLM, which will provide consistent parameter estimates but will not be as efficient as estimates from a GEE. Robust standard errors will be estimated using a clustered jackknife procedure. #> Warning: Because estimation has been done with a GLM, there is no estimated cluster correlation coefficient. Therefore the robust score test cannot be run. In order to run a robust score test for this model, please input a within-cluster correlation coefficient to use. #>  #> Call: #> gee_test(dist ~ speed, data = cars, family = poisson(link = \"log\"),  #>     id = id) #>  #>  #> Coefficient estimates: #>                     Estimate Robust Std Error Lower 95% CI Upper 95% CI #> (Intercept)       2.15096109       0.26098164    1.6394465    2.6624757 #> speed             0.09650242       0.01357674    0.0698925    0.1231123 #> correlation:alpha         NA               NA           NA           NA #>                   Robust Wald p Robust Score p #> (Intercept)        2.220446e-16             NA #> speed              1.178058e-12             NA #> correlation:alpha            NA             NA"},{"path":"/reference/get_test_statistic.html","id":null,"dir":"Reference","previous_headings":"","what":"Just in case anyone wants to invert a p-value to recover the chi-squared distributed test statistic — get_test_statistic","title":"Just in case anyone wants to invert a p-value to recover the chi-squared distributed test statistic — get_test_statistic","text":"Just case anyone wants invert p-value recover chi-squared distributed test statistic","code":""},{"path":"/reference/get_test_statistic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Just in case anyone wants to invert a p-value to recover the chi-squared distributed test statistic — get_test_statistic","text":"","code":"get_test_statistic(pvalue, df)"},{"path":"/reference/get_test_statistic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Just in case anyone wants to invert a p-value to recover the chi-squared distributed test statistic — get_test_statistic","text":"pvalue p-value invert df degrees freedom test","code":""},{"path":"/reference/glm_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Generalized Linear Models with robust and non-robust Wald and Rao (score) tests — glm_test","title":"Generalized Linear Models with robust and non-robust Wald and Rao (score) tests — glm_test","text":"Generalized Linear Models robust non-robust Wald Rao (score) tests","code":""},{"path":"/reference/glm_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalized Linear Models with robust and non-robust Wald and Rao (score) tests — glm_test","text":"","code":"glm_test(...)"},{"path":"/reference/glm_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalized Linear Models with robust and non-robust Wald and Rao (score) tests — glm_test","text":"... Arguments pass regular glm call. observations NA values data (response covariates) dropped.","code":""},{"path":"/reference/glm_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generalized Linear Models with robust and non-robust Wald and Rao (score) tests — glm_test","text":"","code":"glm_test(dist ~ speed, data = cars, family=poisson(link=\"log\")) #>  #> Call: #> glm(dist ~ speed, data = cars, family = poisson(link = \"log\")) #>  #>  #> Coefficient estimates: #>               Estimate Non-robust Std Error Robust Std Error Lower 95% CI #> (Intercept) 2.15096109          0.081774352      0.180014289     1.798140 #> speed       0.09650242          0.004404885      0.009234056     0.078404 #>             Upper 95% CI Non-robust Wald p Robust Wald p Robust Score p #> (Intercept)    2.5037826     1.743527e-152             0   4.945013e-07 #> speed          0.1146008     2.177435e-106             0   3.956496e-05"},{"path":"/reference/jackknife_se.html","id":null,"dir":"Reference","previous_headings":"","what":"Jackknife standard errors — jackknife_se","title":"Jackknife standard errors — jackknife_se","text":"Jackknife standard errors","code":""},{"path":"/reference/jackknife_se.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Jackknife standard errors — jackknife_se","text":"","code":"jackknife_se(object, dat, id = NULL)"},{"path":"/reference/jackknife_se.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Jackknife standard errors — jackknife_se","text":"object fitted object alternative. dat data used fit model id Observations id cluster. included, independence observations assumed.","code":""},{"path":"/reference/lincom.html","id":null,"dir":"Reference","previous_headings":"","what":"Run robust wald test for null hypothesis of form A x beta = c — lincom","title":"Run robust wald test for null hypothesis of form A x beta = c — lincom","text":"Run robust wald test null hypothesis form x beta = c","code":""},{"path":"/reference/lincom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run robust wald test for null hypothesis of form A x beta = c — lincom","text":"","code":"lincom(test_object, A, c)"},{"path":"/reference/lincom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run robust wald test for null hypothesis of form A x beta = c — lincom","text":"test_object Object type raoFit. Matrix specifying linear combination parameters user-specified hypotheses. c Vector user-specified null hypothesis value user-specified linear combinations parameters interest.","code":""},{"path":"/reference/lincom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run robust wald test for null hypothesis of form A x beta = c — lincom","text":"Table relevant quantities interest hypothesis tests.","code":""},{"path":"/reference/lincom.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Run robust wald test for null hypothesis of form A x beta = c — lincom","text":"Shirley Mathur","code":""},{"path":"/reference/lincom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run robust wald test for null hypothesis of form A x beta = c — lincom","text":"","code":"#set true value of beta for DGP beta0s <- rnorm(n = 4) beta1s <- rnorm(n = 4) beta_true <- rbind(beta0s, beta1s) beta_true[,2] <- 0  beta_true[2,1] <- 0   #generate sample data sample_data <- simulate_data_mult(30, Beta = beta_true)  #run weak multinom test sample_multinom_test <- multinom_test(X = sample_data$X,                                       Y = sample_data$Y,                                       j = 2)  #test hypothesis that the coefficient for covariate is same for j = 1, j = 2 #so, we test hypothesis that beta_{k=1,j=1} - beta_{k=1, j=2} = 0  #first, set up A matrix my_A <- set_up_lin_com(J = 5, p = 1, n_hypotheses = 1)  my_A[1,\"k_1_j_1\"] <- 1 my_A[1, \"k_1_j_2\"] <- -1  #then, set c my_c <- 0  #run linear combination test sample_lincom_test <- lincom(sample_multinom_test,                              A = my_A,                              c = my_c)  #print result sample_lincom_test #>            Est   Std..Err Lower.CI..95.. Upper.CI..95..      pval #> 1 -0.001795701 0.02477761    -0.05035892     0.04676752 0.9422257"},{"path":"/reference/multinom_beta_vector_to_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Create \\(\\beta\\) matrix from vector of \\(\\beta\\) for \\(\\beta_k : k \\neq j\\) — multinom_beta_vector_to_matrix","title":"Create \\(\\beta\\) matrix from vector of \\(\\beta\\) for \\(\\beta_k : k \\neq j\\) — multinom_beta_vector_to_matrix","text":"Create \\(\\beta\\) matrix vector \\(\\beta\\) \\(\\beta_k : k \\neq j\\)","code":""},{"path":"/reference/multinom_beta_vector_to_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create \\(\\beta\\) matrix from vector of \\(\\beta\\) for \\(\\beta_k : k \\neq j\\) — multinom_beta_vector_to_matrix","text":"","code":"multinom_beta_vector_to_matrix(values, p, J, null_j, beta_j_null = NULL)"},{"path":"/reference/multinom_beta_vector_to_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create \\(\\beta\\) matrix from vector of \\(\\beta\\) for \\(\\beta_k : k \\neq j\\) — multinom_beta_vector_to_matrix","text":"values vector containing values \\(\\beta_k\\), \\(k \\neq j\\), well \\(\\beta_{k0}, k = 1, \\dots, J\\). particular, vector first \\((J-2)(p+1)\\) entries \\(\\beta_{10}, \\beta_{1}^{\\top}, \\beta_{20}, \\beta_{2}^{\\top}, \\dots, \\beta_{(j-1)0}, \\beta_{j-1}^{\\top},  \\beta_{(j+1)0}, \\beta_{j+1}^{\\top}, \\dots,  \\beta_{(J-1)0}, \\beta_{J-1}^{\\top}, \\beta_{j0}\\). , \\((J-2)(p+1) + 1\\) entry \\(\\beta_{j0}\\). p number covariates. J number categories. null_j specifies category set \\(\\beta_j = 0\\). beta_j_null null hypothesized value \\(\\beta_j\\), default set \\(\\beta_j = 0\\).","code":""},{"path":"/reference/multinom_beta_vector_to_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create \\(\\beta\\) matrix from vector of \\(\\beta\\) for \\(\\beta_k : k \\neq j\\) — multinom_beta_vector_to_matrix","text":"full \\((p+1) \\times (J-1)\\) matrix \\(\\beta\\)","code":""},{"path":"/reference/multinom_beta_vector_to_matrix.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create \\(\\beta\\) matrix from vector of \\(\\beta\\) for \\(\\beta_k : k \\neq j\\) — multinom_beta_vector_to_matrix","text":"Shirley Mathur","code":""},{"path":"/reference/multinom_fisher_scoring.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimization under null or alternative for multinomial model via Fisher scoring. — multinom_fisher_scoring","title":"Optimization under null or alternative for multinomial model via Fisher scoring. — multinom_fisher_scoring","text":"Optimization null alternative multinomial model via Fisher scoring.","code":""},{"path":"/reference/multinom_fisher_scoring.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimization under null or alternative for multinomial model via Fisher scoring. — multinom_fisher_scoring","text":"","code":"multinom_fisher_scoring(   beta,   X,   Y,   null = TRUE,   strong = FALSE,   null_j = NULL,   j_ind = NULL,   k_ind = NULL,   tol = 1e-05,   stepSize = 0.5,   arm_c = 0.5,   maxit = 250,   pseudo_inv = FALSE )"},{"path":"/reference/multinom_fisher_scoring.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimization under null or alternative for multinomial model via Fisher scoring. — multinom_fisher_scoring","text":"beta initial values provided \\(\\beta\\) parameters. X \\(n x p\\) design matrix covariates. Y \\(n x J\\) data matrix outcomes. null TRUE, optimizes null, FALSE, optimizes alternative. Defaults TRUE. strong FALSE, function compute robust score statistic test weak null one specific \\(j\\), \\(\\beta_j = 0\\) length \\(p\\) vector \\(\\beta_j\\). TRUE, function instead computes robust score statistic test strong null \\(\\beta_1 = \\beta_2 = \\dots = \\beta_{J-1} = 0\\) length \\(p\\) vectors \\(\\beta_j\\), \\(j\\\\{1,\\ldots,J-1\\}\\). Default FALSE. null_j  strong FALSE, argument must supplied. gives category \\(j\\) weak null hypothesis \\(\\beta_j = 0\\). Default NULL. j_ind strong FALSE null_j NULL, argument must supplied. gives category index individual covariate tested weak null hypothesis \\(\\beta_{kj} = 0\\). k_ind strong FALSE null_j NULL, argument must supplied. gives covariate index individual covariate tested weak null hypothesis \\(\\beta_{kj} = 0\\). tol tolerance used determine much better update function value must prior stopping algorithm. stepSize size step take parameter update step. arm_c Control parameter checking Armijo condition. maxit Maximum number iterations Fisher scoring. Defaults 250. pseudo_inv Use pseudo-inverse Fisher information matrix update (case inverse computationally singular)","code":""},{"path":"/reference/multinom_fisher_scoring.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Optimization under null or alternative for multinomial model via Fisher scoring. — multinom_fisher_scoring","text":"optimal beta values null alternative model.","code":""},{"path":"/reference/multinom_fisher_scoring.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Optimization under null or alternative for multinomial model via Fisher scoring. — multinom_fisher_scoring","text":"Shirley Mathur","code":""},{"path":"/reference/multinom_get_probs.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute multinomial probabilities for a given value of model parameters. — multinom_get_probs","title":"Compute multinomial probabilities for a given value of model parameters. — multinom_get_probs","text":"Compute multinomial probabilities given value model parameters.","code":""},{"path":"/reference/multinom_get_probs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute multinomial probabilities for a given value of model parameters. — multinom_get_probs","text":"","code":"multinom_get_probs(X, Y, beta)"},{"path":"/reference/multinom_get_probs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute multinomial probabilities for a given value of model parameters. — multinom_get_probs","text":"X \\(n \\times p\\) design matrix covariates. Y \\(n \\times J\\) data matrix outcomes. beta \\((p+1) \\times (J-1) \\beta\\) matrix.","code":""},{"path":"/reference/multinom_get_probs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute multinomial probabilities for a given value of model parameters. — multinom_get_probs","text":"multinomial probabilities given value \\(\\beta\\).","code":""},{"path":"/reference/multinom_get_probs.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compute multinomial probabilities for a given value of model parameters. — multinom_get_probs","text":"Shirley Mathur","code":""},{"path":"/reference/multinom_info_mat.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Information matrix for model parameters. — multinom_info_mat","title":"Compute Information matrix for model parameters. — multinom_info_mat","text":"Compute Information matrix model parameters.","code":""},{"path":"/reference/multinom_info_mat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Information matrix for model parameters. — multinom_info_mat","text":"","code":"multinom_info_mat(X, Y, probs)"},{"path":"/reference/multinom_info_mat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Information matrix for model parameters. — multinom_info_mat","text":"X \\(n x p\\) design matrix covariates. Y \\(n x J\\) data matrix outcomes. probs \\(n \\times J\\) matrix estimated probabilities sample.","code":""},{"path":"/reference/multinom_info_mat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Information matrix for model parameters. — multinom_info_mat","text":"Fisher information matrix model parameters.","code":""},{"path":"/reference/multinom_info_mat.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compute Information matrix for model parameters. — multinom_info_mat","text":"Shirley Mathur","code":""},{"path":"/reference/multinom_log_lik.html","id":null,"dir":"Reference","previous_headings":"","what":"Negative log-likelihood for multinomial data under the alternative — multinom_log_lik","title":"Negative log-likelihood for multinomial data under the alternative — multinom_log_lik","text":"Negative log-likelihood multinomial data alternative","code":""},{"path":"/reference/multinom_log_lik.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Negative log-likelihood for multinomial data under the alternative — multinom_log_lik","text":"","code":"multinom_log_lik(beta_as_vector, Y, X)"},{"path":"/reference/multinom_log_lik.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Negative log-likelihood for multinomial data under the alternative — multinom_log_lik","text":"beta_as_vector vector containing values \\(\\beta_k\\) \\(k = 1, \\dots, J-1\\) \\(\\beta_{k0}, k = 1, \\dots, J\\). particular, vector \\((J-1)(p+1)\\) entries \\(\\beta_{10}, \\beta_{1}^{\\top}, \\beta_{20}, \\beta_{2}^{\\top}, \\dots,  \\beta_{(J-1)0}, \\beta_{J-1}^{\\top}, \\beta_{j0}\\). Y \\(n x J\\) data matrix outcomes. X \\(n x p\\) design matrix covariates.","code":""},{"path":"/reference/multinom_log_lik.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Negative log-likelihood for multinomial data under the alternative — multinom_log_lik","text":"value log likelihood input \\(\\beta\\)","code":""},{"path":"/reference/multinom_log_lik.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Negative log-likelihood for multinomial data under the alternative — multinom_log_lik","text":"Shirley Mathur","code":""},{"path":"/reference/multinom_penalized_estimation.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimization under null or alternative for multinomial model with a Firth penalty. — multinom_penalized_estimation","title":"Optimization under null or alternative for multinomial model with a Firth penalty. — multinom_penalized_estimation","text":"Optimization null alternative multinomial model Firth penalty.","code":""},{"path":"/reference/multinom_penalized_estimation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimization under null or alternative for multinomial model with a Firth penalty. — multinom_penalized_estimation","text":"","code":"multinom_penalized_estimation(   beta,   X,   Y,   null = TRUE,   strong = FALSE,   null_j = NULL,   j_ind = NULL,   k_ind = NULL,   tol = 1e-05,   stepSize = 0.5,   arm_c = 0.5,   maxit = 250,   maxit_fs = 5,   pseudo_inv = FALSE )"},{"path":"/reference/multinom_penalized_estimation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimization under null or alternative for multinomial model with a Firth penalty. — multinom_penalized_estimation","text":"beta initial values provided \\(\\beta\\) parameters. X \\(n x p\\) design matrix covariates. Y \\(n x J\\) data matrix outcomes. null TRUE, optimizes null, FALSE, optimizes alternative. Defauls TRUE. strong FALSE, function compute robust score statistic test weak null one specific \\(j\\), \\(\\beta_j = 0\\) length \\(p\\) vector \\(\\beta_j\\). TRUE, function instead computes robust score statistic test strong null \\(\\beta_1 = \\beta_2 = \\dots = \\beta_{J-1} = 0\\) length \\(p\\) vectors \\(\\beta_j\\), \\(j\\\\{1,\\ldots,J-1\\}\\). Default FALSE. null_j strong FALSE, argument must supplied. gives category \\(j\\) weak null hypothesis \\(\\beta_j = 0\\). j_ind strong FALSE null_j NULL, argument must supplied. gives category index individual covariate tested weak null hypothesis \\(\\beta_{kj} = 0\\). k_ind strong FALSE null_j NULL, argument must supplied. gives covariate index individual covariate tested weak null hypothesis \\(\\beta_{kj} = 0\\). tol tolerance used determine much better update function value must prior stopping algorithm. stepSize size step take parameter update step, used MLE step. arm_c Control parameter checking Armijo condition, used MLE step. maxit Maximum number iterations augmentation algorithm. Defaults 250. maxit_fs Maximum number iterations Fisher scoring. Defaults 5. pseudo_inv Use pseudo-inverse Fisher information matrix update (case inverse computationally singular)","code":""},{"path":"/reference/multinom_penalized_estimation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Optimization under null or alternative for multinomial model with a Firth penalty. — multinom_penalized_estimation","text":"optimal beta values null alternative model.","code":""},{"path":"/reference/multinom_penalized_estimation.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Optimization under null or alternative for multinomial model with a Firth penalty. — multinom_penalized_estimation","text":"Sarah Teichman","code":""},{"path":"/reference/multinom_score_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute score for model parameters. — multinom_score_vector","title":"Compute score for model parameters. — multinom_score_vector","text":"Compute score model parameters.","code":""},{"path":"/reference/multinom_score_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute score for model parameters. — multinom_score_vector","text":"","code":"multinom_score_vector(X, Y, probs)"},{"path":"/reference/multinom_score_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute score for model parameters. — multinom_score_vector","text":"X \\(n \\times p\\) design matrix covariates. Y \\(n \\times J\\) data matrix outcomes. probs \\(n \\times J\\) matrix estimated probabilities sample.","code":""},{"path":"/reference/multinom_score_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute score for model parameters. — multinom_score_vector","text":"score vector model parameters.","code":""},{"path":"/reference/multinom_score_vector.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compute score for model parameters. — multinom_score_vector","text":"Shirley Mathur","code":""},{"path":"/reference/multinom_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Robust score (Rao) tests for multinomial regression. — multinom_test","title":"Robust score (Rao) tests for multinomial regression. — multinom_test","text":"Robust score (Rao) tests multinomial regression.","code":""},{"path":"/reference/multinom_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Robust score (Rao) tests for multinomial regression. — multinom_test","text":"","code":"multinom_test(   X = NULL,   Y,   formula = NULL,   data = NULL,   strong = FALSE,   j = NULL,   all_score = FALSE,   penalty = FALSE,   pseudo_inv = FALSE )"},{"path":"/reference/multinom_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Robust score (Rao) tests for multinomial regression. — multinom_test","text":"X \\(n x p\\) design matrix covariates. Y \\(n x J\\) data matrix outcomes. formula one-sided formula specifying form mean model fit (use data argument X included) data dataframe \\(n\\) rows containing variables given formula (use formula argument X included) strong FALSE, function compute robust score statistic test weak null one specific \\(j\\), \\(\\beta_j = 0\\) length \\(p\\) vector \\(\\beta_j\\). TRUE, function instead computes robust score statistic test strong null \\(\\beta_1 = \\beta_2 = \\dots = \\beta_{J-1} = 0\\) length \\(p\\) vectors \\(\\beta_j\\), \\(j\\\\{1,\\ldots,J-1\\}\\). Default FALSE. j strong FALSE, argument must supplied. gives category \\(j\\) weak null hypothesis \\(\\beta_j = 0\\). all_score TRUE, score tests individual covariate category pair (.e. null \\(\\beta_{jk} = 0\\) category \\(j = 1, \\dots, J-1\\) covariate \\(k = 1, \\dots, p\\) pair) run reported output coefficient table. Default FALSE. penalty TRUE apply Firth penalty estimation alternative null. Defaults FALSE (ask Amy preference) pseudo_inv Use pseudo inverse inverted portion robust score test avoid issues nearly singular matrices.","code":""},{"path":"/reference/multinom_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Robust score (Rao) tests for multinomial regression. — multinom_test","text":"robust score test statistic specified hypothesis test. list including test statistic, p-value, estimated parameters null hypothesis, estimated parameters alternative hypothesis.","code":""},{"path":"/reference/multinom_test.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Robust score (Rao) tests for multinomial regression. — multinom_test","text":"Shirley Mathur","code":""},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"/reference/print.raoFit.html","id":null,"dir":"Reference","previous_headings":"","what":"Print function — print.raoFit","title":"Print function — print.raoFit","text":"Print function","code":""},{"path":"/reference/print.raoFit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print function — print.raoFit","text":"","code":"# S3 method for class 'raoFit' print(x, ...)"},{"path":"/reference/print.raoFit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print function — print.raoFit","text":"x Object class raoFit ... arguments passed methods.","code":""},{"path":"/reference/print.raoFit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print function — print.raoFit","text":"NULL. Displays printed model summary.","code":""},{"path":"/reference/print.raoFit.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print function — print.raoFit","text":"Shirley Mathur","code":""},{"path":"/reference/robust_score_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Robust score (Rao) tests with finite-sample correction — robust_score_test","title":"Robust score (Rao) tests with finite-sample correction — robust_score_test","text":"default behavior finite sample correction (covariance score) correlated data, uncorrelated data. choice performed best small simulation study. See Guo et al details; proposed modification equation 20.","code":""},{"path":"/reference/robust_score_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Robust score (Rao) tests with finite-sample correction — robust_score_test","text":"","code":"robust_score_test(glm_object, call_to_model, param = 1, id = NA)"},{"path":"/reference/robust_score_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Robust score (Rao) tests with finite-sample correction — robust_score_test","text":"glm_object fitted glm alternative. call_to_model call used fit model. Used internally. param parameter want test? Used internally. id observations id cluster","code":""},{"path":"/reference/robust_score_test.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Robust score (Rao) tests with finite-sample correction — robust_score_test","text":"Guo, X., Pan, W., Connett, J. E., Hannan, P. J., & French, S. . (2005). Small-sample performance robust score test modifications generalized estimating equations. Statistics Medicine, 24(22), 3479–3495. Wiley Online Library. doi:10.1002/sim.2161","code":""},{"path":"/reference/score_contribution.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute score contribution to robust score statistic for glm robust score tests. — score_contribution","title":"Compute score contribution to robust score statistic for glm robust score tests. — score_contribution","text":"Compute score contribution robust score statistic glm robust score tests.","code":""},{"path":"/reference/score_contribution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute score contribution to robust score statistic for glm robust score tests. — score_contribution","text":"","code":"score_contribution(i, model_fits, yy, xx, family, link)"},{"path":"/reference/score_contribution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute score contribution to robust score statistic for glm robust score tests. — score_contribution","text":"Index observation. model_fits fitted glm null hypothesis. yy Vector observed responses. xx Design matrix model. family model family fitted glm. link link function utilized fitted glm.","code":""},{"path":"/reference/set_up_lin_com.html","id":null,"dir":"Reference","previous_headings":"","what":"Create matrix to be populated with coefficients for user-specified number of hypotheses. — set_up_lin_com","title":"Create matrix to be populated with coefficients for user-specified number of hypotheses. — set_up_lin_com","text":"Create matrix populated coefficients user-specified number hypotheses.","code":""},{"path":"/reference/set_up_lin_com.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create matrix to be populated with coefficients for user-specified number of hypotheses. — set_up_lin_com","text":"","code":"set_up_lin_com(J, p, n_hypotheses)"},{"path":"/reference/set_up_lin_com.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create matrix to be populated with coefficients for user-specified number of hypotheses. — set_up_lin_com","text":"J Number categories. p Number coefficients (excluding intercept). n_hypotheses Number hypotheses test.","code":""},{"path":"/reference/set_up_lin_com.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create matrix to be populated with coefficients for user-specified number of hypotheses. — set_up_lin_com","text":"'' matrix n_hypotheses rows (J-1) x (p+1) columns various coefficient category combinations column names. matrix filled 0's, can modified user reflect linear combinations wish test.","code":""},{"path":"/reference/set_up_lin_com.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create matrix to be populated with coefficients for user-specified number of hypotheses. — set_up_lin_com","text":"Shirley Mathur","code":""},{"path":"/reference/simulate_data_mult.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate multinomial data under the null (strong or weak) or alternative — simulate_data_mult","title":"Simulate multinomial data under the null (strong or weak) or alternative — simulate_data_mult","text":"default, \\(p = 2\\) single Uniform(0,1) continuous covariate.","code":""},{"path":"/reference/simulate_data_mult.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate multinomial data under the null (strong or weak) or alternative — simulate_data_mult","text":"","code":"simulate_data_mult(   nn,   null = TRUE,   strong = FALSE,   alt_magnitude = 1,   jj = 5,   ms = 10000,   jj_null = NULL,   Beta = NULL,   sd_beta0s = NULL,   sd_beta1s = NULL,   overdispersion = 0,   covariate = NULL )"},{"path":"/reference/simulate_data_mult.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate multinomial data under the null (strong or weak) or alternative — simulate_data_mult","text":"nn Number observations null TRUE simulate null, FALSE simulate alternative strong null TRUE, simulate strong null? Defaults FALSE (simulate weak null) alt_magnitude mean parameter beta1 vector null = FALSE. Defaults \\(1\\). jj Number taxa ms Number counts per sample jj_null weak null, taxon null Beta User-specified value true beta (wish draw fixed beta rather generate beta0's beta1's). sd_beta0s beta0's drawn normal distribution mean zero. standard deviation distribution. sd_beta1s beta1's drawn normal distribution mean zero null non-zero alternative. standard deviation distribution. overdispersion additional normal random variable can added link function add dispersion multinomial distribution. standard aviation normal variable. Useful confirming error rate control model misspecification. covariate optional covariate vector, provided covariate sequence increasing values 0 1.","code":""},{"path":"/reference/simulate_data_mult.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulate multinomial data under the null (strong or weak) or alternative — simulate_data_mult","text":"Amy Willis","code":""}]
